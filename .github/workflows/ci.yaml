on:
  push: {}
  pull_request: {}

jobs:
  ubuntu:
    runs-on: ${{matrix.os}}
    env:
      PYVERSIONS: ${{matrix.pyversions}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: "Build CI"
        run: |
          cd $GITHUB_WORKSPACE
          ./ci/build_linux.sh
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-20.04
            pyversions: "python3.8 python3.9"

  windows:
    runs-on: windows-2019
    env:
      CI_ARCH: ${{matrix.CI_ARCH}}
      CI_WINDOWS: "1"
      PYVERSION: ${{matrix.PYVERSION}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Cache Pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{matrix.CI_ARCH}}
          restore-keys: |
            ${{ runner.os }}-pip-${{matrix.CI_ARCH}}
      - name: Configure MSVC Environment Variables
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\enterprise\VC\Auxiliary\Build\vcvars%CI_ARCH%.bat"
          set > %GITHUB_ENV%
      - name: Build python Wheels
        shell: powershell
        run: |
          set-location $Env:GITHUB_WORKSPACE
          ./ci/build_python.ps1
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: python-wheels-win${{matrix.CI_ARCH}}-${{matrix.PYVERSION}}
          path: dist/*
    strategy:
      fail-fast: true
      matrix:
        CI_ARCH: ["32", "64"]
        PYVERSION: ["3.10", "3.9", "3.8", "3.7"]

  python_sdist:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Build Python sdist
        run: |
          sudo apt update
          cd $GITHUB_WORKSPACE
          sudo apt-fast install -y virtualenv python3.9 python3.9-dev
          cd $GITHUB_WORKSPACE
          python synthizer-c/vendor.py synthizer-vendored
          virtualenv -p python3.9 ./venvs/python3.9
          source venvs/python3.9/bin/activate
          pip install -U cython wheel scikit-build
          # Don't build Synthizer just to get an sdist.
          CI_SDIST=1 python setup.py sdist
          deactivate
          # Now try to build it, to make sure vendoring worked out.
          virtualenv -p python3.9 ./venvs/python3.9-test
          source venvs/python3.9-test/bin/activate
          pip install dist/*
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: python-sdist
          path: dist/*

  deploy_pypi:
    if: startsWith(github.ref, 'refs/tags') && !github.event_type != 'pull_request'
    needs: ["windows", "python_sdist", "ubuntu"]
    runs-on: ubuntu-20.04
    steps:
      - name: download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{matrix.ARTIFACT}}
          path: ~/artifacts
      - name: Upload to Pypi
        env:
          TWINE_USERNAME: camlorn
          TWINE_PASSWORD: ${{secrets.TWINE_PASSWORD}}
        run: |
          sudo pip3 install twine
          twine upload /home/runner/artifacts/*
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        ARTIFACT:
          - python-wheels-win32-3.10
          - python-wheels-win64-3.10
          - python-wheels-win32-3.9
          - python-wheels-win64-3.9
          - python-wheels-win32-3.8
          - python-wheels-win64-3.8
          - python-wheels-win32-3.7
          - python-wheels-win64-3.7
          - python-sdist
